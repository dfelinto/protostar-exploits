package main

import (
	"bytes"
	"testing"
)

func TestFillByteArray(t *testing.T) {
	smallBuffer := make([]byte, 10)
	fill_byte_array(smallBuffer, '\xAB')

	for i := 0; i < 10; i++ {
		if smallBuffer[i] == '\xAB' {
			continue
		}
		t.Errorf("Wrong byte, got: [%d]=%c", i, smallBuffer[i])
		return
	}
}

func TestFillByteArrayOrderedEx(t *testing.T) {

	buffer := make([]byte, 12)
	fill_byte_array_ordered_ex(buffer, 'C', 3)

	expected := []byte("CCCDDDEEEFFF")

	if bytes.Compare(buffer, expected) != 0 {
		t.Errorf("Wrong result, got: %c, expected %c", buffer, expected)
	}
}

func TestFillByteArrayOrdered(t *testing.T) {

	buffer := make([]byte, 12)
	fill_byte_array_ordered(buffer)

	expected := []byte("AAAABBBBCCCC")

	if bytes.Compare(buffer, expected) != 0 {
		t.Errorf("Wrong result, got: %c, expected %c", buffer, expected)
	}
}

func TestSliceBuffer(t *testing.T) {
	buffer := []byte("AABBCCDD")
	code := []byte("EE")
	expected := []byte("EEBBCCDD")

	result := slide_code_into_buffer(buffer, code)
	if bytes.Compare(result, expected) != 0 {
		t.Errorf("Wrong result, got: %c, expected %c", result, expected)
	}
}
