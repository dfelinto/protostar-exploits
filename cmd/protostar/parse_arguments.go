package main

import (
	"errors"
	"flag"
)

const (
	lessonStack0 string = "stack0"
	lessonStack1        = "stack1"
	lessonStack2        = "stack2"
)

var lessonsMap = map[string]bool{
	lessonStack0: true,
	lessonStack1: true,
	lessonStack2: true,
}

func parse_print_arguments() string {
	argsMessage := "Available lessons:"

	for key, _ := range lessonsMap {
		argsMessage += "\n * " + key
	}

	return argsMessage
}

func parse() (stack, error) {
	flag.Parse()

	args := flag.Args()

	if len(args) == 0 {
		errorMessage := "Error, no lesson specified. \n"
		errorMessage += parse_print_arguments()
		return nil, errors.New(errorMessage)
	}

	lessonArg := args[0]
	if _, ok := lessonsMap[lessonArg]; !ok {
		errorMessage := "Error, lesson not available: " + lessonArg + "\n"
		errorMessage += parse_print_arguments()
		return nil, errors.New(errorMessage)
	}

	switch lessonArg {
	case lessonStack0:
		return stack0{}, nil
	case lessonStack1:
		return stack1{}, nil
	case lessonStack2:
		return stack2{}, nil
	default:
		return nil, errors.New("Assert! lesson not implemented: " + lessonArg)
	}
}
