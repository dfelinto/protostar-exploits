package main

import (
	"fmt"
	"os"
	"os/exec"
)

type stack interface {
	get_lesson_name() string
	get_input_data() []byte
}

func run_lesson(s stack) {
	fmt.Println(("Starting lesson ..."))

	target_binary := get_target_binary(s)
	password := s.get_input_data()
	populate_input(s, target_binary, password)
}

func get_target_binary(s stack) string {
	return "/opt/protostar/bin/" + s.get_lesson_name()
}

func fill_byte_array(array []byte, data byte) {
	for i := 0; i < len(array); i++ {
		array[i] = data
	}
}

func populate_input(s stack, target_binary string, password []byte) {
	fmt.Println("Trying to exploit: " + target_binary)
	cmdTarget := exec.Command(target_binary)
	cmdTarget.Stdout = os.Stdout
	stdin, _ := cmdTarget.StdinPipe()
	defer stdin.Close()

	_ = cmdTarget.Start()
	stdin.Write(password)
}
